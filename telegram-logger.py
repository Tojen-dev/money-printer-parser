#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤ –≤ Telegram
"""

import asyncio
import os
import time
from datetime import datetime
from telethon import TelegramClient
from config import TELEGRAM_API_ID, TELEGRAM_API_HASH, TELEGRAM_PHONE, TELEGRAM_SESSION_NAME

class TelegramLogger:
    def __init__(self, chat_id=None):
        self.chat_id = chat_id or "me"  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–µ–±–µ, –µ—Å–ª–∏ chat_id –Ω–µ —É–∫–∞–∑–∞–Ω
        self.client = None
        self.last_position = 0
        
    async def setup_client(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            self.client = TelegramClient(TELEGRAM_SESSION_NAME, TELEGRAM_API_ID, TELEGRAM_API_HASH)
            await self.client.start(phone=TELEGRAM_PHONE)
            print(f"‚úÖ Telegram –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram: {e}")
            return False
    
    async def send_log(self, message, log_type="INFO"):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        if not self.client:
            return False
            
        try:
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            formatted_message = f"üìã **{log_type}** [{timestamp}]\n\n{message}"
            
            await self.client.send_message(self.chat_id, formatted_message, parse_mode='markdown')
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
            return False
    
    async def send_file(self, file_path, caption=""):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –≤ Telegram"""
        if not self.client or not os.path.exists(file_path):
            return False
            
        try:
            await self.client.send_file(self.chat_id, file_path, caption=caption)
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            return False
    
    async def monitor_logs(self, log_file, interval=30):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥ —Ñ–∞–π–ª–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π"""
        if not await self.setup_client():
            return
            
        print(f"üìä –ù–∞—á–∏–Ω–∞—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ñ–∞–π–ª–∞: {log_file}")
        await self.send_log(f"üöÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ –∑–∞–ø—É—â–µ–Ω\n–§–∞–π–ª: `{log_file}`\n–ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval} —Å–µ–∫")
        
        while True:
            try:
                if os.path.exists(log_file):
                    with open(log_file, 'r', encoding='utf-8') as f:
                        f.seek(self.last_position)
                        new_content = f.read()
                        
                        if new_content:
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏
                            lines = new_content.strip().split('\n')
                            if lines and lines[0]:
                                await self.send_log(f"üìù –ù–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥–µ:\n\n```\n{new_content[-1000:]}\n```")
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
                            self.last_position = f.tell()
                else:
                    await self.send_log("‚ö†Ô∏è –õ–æ–≥ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    
            except Exception as e:
                await self.send_log(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                
            await asyncio.sleep(interval)
    
    async def send_current_logs(self, log_file, lines=50):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –ª–æ–≥ —Ñ–∞–π–ª–∞"""
        if not await self.setup_client():
            return
            
        try:
            if os.path.exists(log_file):
                with open(log_file, 'r', encoding='utf-8') as f:
                    all_lines = f.readlines()
                    last_lines = all_lines[-lines:] if len(all_lines) > lines else all_lines
                    content = ''.join(last_lines)
                    
                    if content.strip():
                        await self.send_log(f"üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(last_lines)} –∑–∞–ø–∏—Å–µ–π:\n\n```\n{content}\n```")
                    else:
                        await self.send_log("üìã –õ–æ–≥ —Ñ–∞–π–ª –ø—É—Å—Ç")
            else:
                await self.send_log("‚ö†Ô∏è –õ–æ–≥ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
        except Exception as e:
            await self.send_log(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–∞: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description='Telegram Logger –¥–ª—è BWEnews')
    parser.add_argument('--log-file', default='bwe_news_log.txt', help='–ü—É—Ç—å –∫ –ª–æ–≥ —Ñ–∞–π–ª—É')
    parser.add_argument('--chat-id', help='ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–µ–±–µ)')
    parser.add_argument('--interval', type=int, default=30, help='–ò–Ω—Ç–µ—Ä–≤–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö')
    parser.add_argument('--lines', type=int, default=50, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏')
    parser.add_argument('--mode', choices=['monitor', 'send'], default='monitor', 
                       help='–†–µ–∂–∏–º: monitor - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥, send - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –ª–æ–≥–∏')
    
    args = parser.parse_args()
    
    logger = TelegramLogger(args.chat_id)
    
    if args.mode == 'monitor':
        await logger.monitor_logs(args.log_file, args.interval)
    else:
        await logger.send_current_logs(args.log_file, args.lines)
        await logger.client.disconnect()

if __name__ == "__main__":
    asyncio.run(main())
